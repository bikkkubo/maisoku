name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ghostscript
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest reportlab
    
    - name: Generate sample PDFs
      run: |
        python scripts/gen_sample_pdfs.py
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short \
          --ignore=tests/acceptance/ \
          -x
    
    - name: Run acceptance tests
      run: |
        pytest tests/acceptance/ -v --tb=short -x
    
    - name: Test CLI directly
      run: |
        # Basic smoke test
        mysoku-rename --help
        
        # Test with generated samples (if available)
        if [ -d "tests/acceptance/samples" ]; then
          echo "Testing with generated samples..."
          mysoku-rename --dry-run tests/acceptance/samples --debug || echo "Dry-run completed"
        else
          echo "No samples available, skipping CLI test"
        fi

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy
        pip install -e .
    
    - name: Run ruff (linting)
      run: |
        ruff check src/ tests/ scripts/ --output-format=github
    
    - name: Run ruff (formatting)
      run: |
        ruff format --check src/ tests/ scripts/
    
    - name: Run mypy (type checking)
      run: |
        mypy src/mysoku_renamer/ --ignore-missing-imports || echo "Type check completed with warnings"

  package:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-${{ github.sha }}
        path: dist/
        retention-days: 7

  integration:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install reportlab
    
    - name: Generate test data
      run: |
        python scripts/gen_sample_pdfs.py
    
    - name: Integration test - dry run
      run: |
        echo "=== Testing dry-run mode ==="
        mysoku-rename --dry-run tests/acceptance/samples \
          --output integration_preview.tsv \
          --debug --max-files 10
        
        # Verify TSV output
        if [ -f "integration_preview.tsv" ]; then
          echo "Preview TSV created successfully"
          wc -l integration_preview.tsv
          head -n 5 integration_preview.tsv
        else
          echo "ERROR: Preview TSV not created"
          exit 1
        fi
    
    - name: Integration test - apply mode
      run: |
        echo "=== Testing apply mode (copy) ==="
        mkdir -p integration_output
        
        mysoku-rename --apply tests/acceptance/samples \
          --outdir integration_output \
          --output integration_apply.tsv \
          --debug
        
        # Verify output
        if [ -d "integration_output" ] && [ "$(ls -A integration_output)" ]; then
          echo "Apply mode (copy) successful"
          ls -la integration_output/
        else
          echo "WARNING: Apply mode did not create expected output"
        fi
        
        # Check for rollback TSV
        rollback_files=$(find . -name "mysoku_rollback_*.tsv" -print)
        if [ ! -z "$rollback_files" ]; then
          echo "Rollback TSV created: $rollback_files"
        else
          echo "WARNING: No rollback TSV found"
        fi
    
    - name: Upload integration artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-results-${{ github.sha }}
        path: |
          integration_*.tsv
          integration_output/
          mysoku_rollback_*.tsv
        retention-days: 3